soil$Country<-Countries$Name[correspondances]
soil <- soil[complete.cases(soil$Country), ]
soil<-as.data.frame(apply(soil, 2, as.character))
#\greenhouse gas (GHG) emissions by country
GHG<-read.csv("GHG_emission.csv",sep=";")
correspondances <- match(GHG$Country, Countries$GHG)
GHG$Country<-Countries$Name[correspondances]
GHG <- GHG[complete.cases(GHG$Country), ]
#\population by country
Pop<-read.csv("population.csv",sep=";")%>%
select(1,5:10)
colnames(Pop)[1:7]=c("Country","Y2015","Y2016","Y2017","Y2018","Y2019","Y2020")
correspondances <- match(Pop$Country, Countries$population)
Pop$Country<-Countries$Name[correspondances]
Pop <- Pop[complete.cases(Pop$Country), ]
#1
GHG<-left_join(GHG,Pop)%>%
group_by(Country)%>%
summarize(X2015=mean(as.numeric(X2015*10^6)/as.numeric(Y2015)),
X2016=mean(as.numeric(X2016*10^6)/as.numeric(Y2016)),
X2017=mean(as.numeric(X2017*10^6)/as.numeric(Y2017)),
X2018=mean(as.numeric(X2018*10^6)/as.numeric(Y2018)),
X2019=mean(as.numeric(X2019*10^6)/as.numeric(Y2019)),
X2020=mean(as.numeric(X2020*10^6)/as.numeric(Y2020)))%>%
ungroup()
#
GHG<-as.data.frame(apply(GHG, 2, as.character))
HCFC<-read.csv("HCFC_tot.csv",sep=";")
HCFC<-HCFC[-1,]%>%
select(1,2,10:15)%>%
#1
mutate(X=ifelse(is.na(X) | X==0,0,0.005*as.numeric(X)))
#
colnames(HCFC)=c("Country","X2007","X2015","X2016","X2017","X2018","X2019","X2020")
correspondances <- match(HCFC$Country, Countries$HCFC)
HCFC$Country<-Countries$Name[correspondances]
HCFC <- HCFC[complete.cases(HCFC$Country), ]
HCFC<-as.data.frame(apply(HCFC, 2, as.character))
#\Tableau agreement limit(2)
control<-read.csv("Control_limHCFC.csv",sep=";")
correspondances <- match(control$Country, Countries$Lim_HCFC)
control$Country<-Countries$Name[correspondances]
control <- control[complete.cases(control$Country), ]
control<-as.data.frame(apply(control, 2, as.character))
#
#not yet entered
#not yet entered
#not yet entered
#not yet entered
SW_chem<-read.csv("SW_quality.csv",sep=";")
SW_chem<-SW_chem%>%
select(7:9,22)%>%
pivot_wider(names_from = Year, values_from = Value)
colnames(SW_chem)=c("Country","Variable","X2017","X2020")
SW_chem<-SW_chem%>%
group_by(Country)%>%
summarize(#1
X2017=mean(X2017,na.rm=TRUE),
X2020=mean(X2020,na.rm=TRUE))%>%
#
#2
mutate(X2015=X2017,
X2016=X2017,
X2018=X2017,
X2019=X2017)
#
correspondances <- match(SW_chem$Country, Countries$SW_chem)
SW_chem$Country<-Countries$Name[correspondances]
SW_chem <- SW_chem[complete.cases(SW_chem$Country), ]
SW_chem<-as.data.frame(apply(SW_chem, 2, as.character))
GW_chem<-read.csv("GW_quality.csv",sep=",")
GW_chem<-GW_chem%>%
select(7:9)
GW_chem<-GW_chem%>%
distinct()%>%
pivot_wider(names_from = Year, values_from = Value)
colnames(GW_chem)=c("Country","X2017","X2020","SUP")
#1
GW_chem<-GW_chem%>%
select(-contains("SUP"))%>%
mutate(X2015=X2017,
X2016=X2017,
X2018=X2017,
X2019=X2017)
#
correspondances <- match(GW_chem$Country, Countries$GW_chem)
GW_chem$Country<-Countries$Name[correspondances]
GW_chem <- GW_chem[complete.cases(GW_chem$Country), ]
GW_chem<-as.data.frame(apply(GW_chem, 2, as.character))
#pas fait
ter_conv<-read.csv("BII_value.csv",sep=";")%>%
#1
mutate(X2015=X2015*100,
X2016=X2016*100,
X2017=X2017*100,
X2018=X2018*100,
X2019=X2019*100,
X2020=X2020*100)
#
correspondances <- match(ter_conv$Country, Countries$BII)
ter_conv$Country<-Countries$Name[correspondances]
ter_conv <- ter_conv[complete.cases(ter_conv$Country), ]
ter_conv<-as.data.frame(apply(ter_conv, 2, as.character))
#pas fait
Cobio<-read.csv("coast_bio.csv",sep = ",")%>%
pivot_wider(names_from = scenario, values_from = value)%>%
filter(long_goal=="Biodiversity" & dimension=="score")%>%
select(5,9:14)
colnames(Cobio)=c("Country","X2015","X2016","X2017","X2018","X2019","X2020")
correspondances <- match(Cobio$Country, Countries$Coast_bio)
Cobio$Country<-Countries$Name[correspondances]
Cobio<- Cobio[complete.cases(Cobio$Country), ]
Cobio<-as.data.frame(apply(Cobio, 2, as.character))
PM2<-read.csv("PM2.5.csv",sep=";")
PM2<-PM2%>%select(Location,Period,FactValueNumeric)%>%
pivot_wider(names_from = Period, values_from = FactValueNumeric)
colnames(PM2)=c("Country","X2019","X2018","X2017","X2016","X2015")
#1
PM2<-PM2%>%
mutate(X2020=X2019)
#
correspondances <- match(PM2$Country, Countries$PM2.5)
PM2$Country<-Countries$Name[correspondances]
PM2<- PM2[complete.cases(PM2$Country), ]
PM2<-as.data.frame(apply(PM2, 2, as.character))
Wash<-read.csv("washdash.csv", sep= ";")
Wash<-Wash%>%group_by(Country,Year,Coverage)%>%
#1
filter(Safely.managed.element=="Free from contamination")%>%
#
select(Country,Year,Coverage)%>%
ungroup()%>%
pivot_wider(names_from = Year, values_from = Coverage)%>%
select(1,7:12)
colnames(Wash)=c("Country","X2015","X2016","X2017","X2018","X2019","X2020")
correspondances <- match(Wash$Country, Countries$Drinking)
Wash$Country<-Countries$Name[correspondances]
Wash<- Wash[complete.cases(Wash$Country), ]
Wash<-as.data.frame(apply(Wash, 2, as.character))
Worldher<-read.csv("Worldheri.csv",sep = ";")
Worldher<-Worldher%>%
group_by(Country)%>%
#1
summarise(X2014=mean((1-X2014/4)*100,na.rm=TRUE),
X2017=mean((1-X2017/4)*100,na.rm=TRUE),
X2020=mean((1-X2020/4)*100,na.rm=TRUE))%>%
#
#2
rename("X2015"=X2014)%>%
mutate(X2016=X2015,
X2018=X2017,
X2019=X2017)%>%
#
ungroup
correspondances <- match(Worldher$Country, Countries$Heritage)
Worldher$Country<-Countries$Name[correspondances]
Worldher<- Worldher[complete.cases(Worldher$Country), ]
Worldher<-as.data.frame(apply(Worldher, 2, as.character))
country_table<-function(name){
#\Source Function
#1
Tr<-Tree%>%
filter(Country==name)%>%
mutate(Function="Source",
Indicator="state of forest reccources",
ideal_state="100",
unit="%")
#
Fs<-fishsust %>%
filter(Country==name)%>%
mutate(Function="Source",
Indicator="Proportion of fish stocks not overexploited",
ideal_state="100",
unit="% Sus fish stock")
Ws<-waterstress%>%
filter(Country==name)%>%
mutate(Function="Source",
Indicator="Surfacewater Stress",
ideal_state="25",
unit="% of stress")
Gwt<-groundwat%>%
filter(Country==name)%>%
mutate(Function="Source",
Indicator="Groundwater stress",
ideal_state="25",
unit="%")
Soil<-soil%>%
filter(Country==name)%>%
mutate(Function="Source",
Indicator="area with tolerable erosion",
ideal_state="2",
unit="Tonnes/hectare/year")
#\Sink function
ghg<-GHG%>%
filter(Country==name)%>%
mutate(Function="Sink",
Indicator="CO2 emissions [tonnes per capita]",
ideal_state="2.88",
unit="tonnes per year per capita")
hcfc<-HCFC%>%
filter(Country==name)%>%
mutate(Function="Sink",
Indicator="Consumption of HCFC in ODP per capita",
unit="0.5% compare to 2007 in CO2-eq tonnes")%>%
rename("ideal_state"=X2007)
Schem<-SW_chem%>%
filter(Country==name)%>%
mutate(Function="Sink",
Indicator="Proportion of surface water in good chemical status",
ideal_state="100",
unit="%")
Gchem<-GW_chem%>%
filter(Country==name)%>%
mutate(Function="Sink",
Indicator="Proportion of ground water in good chemical status",
ideal_state="100",
unit="%")
#\Life support
BII<-ter_conv%>%
filter(Country==name)%>%
mutate(Function="Life support",
Indicator="Terrestrial habitats in favourable conservation status",
ideal_state="100",
unit="%")
Cobi<-Cobio%>%
filter(Country==name)%>%
mutate(Function="Life support",
Indicator="Aquatic habitats in favourable conservation status",
ideal_state="100",
unit="%")
#\Human health and welfare function
pm<-PM2%>%
filter(Country==name)%>%
mutate(Function="Human health and welfare",
Indicator="Concentrations of PM2.5",
ideal_state="5",
unit="Î¼g/m3")
Drink<-Wash%>%
filter(Country==name)%>%
mutate(Function="Human health and welfare",
Indicator="Drinking water contamination",
ideal_state="100",
unit="% without E.coli")
Wher<-Worldher%>%
filter(Country==name)%>%
mutate(Function="Human health and welfare",
Indicator="status of world heritage sites",
ideal_state="100",
unit="% Good status")
Capnt=bind_rows(Tr,Fs,Ws,Gwt,Soil,ghg,hcfc,Schem,Gchem,BII,Cobi,pm,Drink,Wher)
#2
write.csv(Capnt,paste0("Country/",name,".csv"))
#
}
country_table("Brazil")
test_indic<-read.csv("Country/Brazil.csv")
kable(test_indic) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
all_indic<-function(Countries){
#1
for (i in 1:nrow(Countries)){
n<-Countries[i,1]
country_table(n)
#
}
#2
all_countries<-read.csv(paste0("Country/",Countries[1,1],".csv"))
for (i in 2:nrow(Countries)){
n<-Countries[i,1]
y<-read.csv(paste0("Country/",n,".csv"))
all_countries<-rbind(all_countries,y)
#
}
#3
write.csv(all_countries,paste0("Country/","all_countries",".csv"))
#
}
all_indic(Countries)
all<-read.csv("Country/all_countries.csv")
#1
normhab<-function(value,gpmin,gpmax){5+(gpmax-5)*((value-gpmin)/(gpmax-gpmin))}
#
normall<-function(name)
{
Pays<-read.csv(paste0("Country/",name,".csv"))
table<-read.csv(paste0("Country/",name,".csv"))
n<-1
###NORMALISER###
##Source Function
#forest
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="state of forest reccources"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-ifelse(x>85,100,
ifelse(x<60,5,normhab(x,60,85)))
}
n<-n+1
}
#fish :
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Proportion of fish stocks not overexploited"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-normhab(x,0,100)
}
n<-n+1
}
#water stress:
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Surfacewater Stress"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-ifelse(!is.na(x) & x<=25,100,ifelse(!is.na(x) & x>=100,5,abs(normhab(x,25,100))))
}
n<-n+1
}
#
#Groundwater
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Groundwater stress"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-ifelse(!is.na(x) & x>=100,5,ifelse(!is.na(x) & x<=25,100,abs(normhab(x,25,100))))
}
n<-n+1
}
#Erosion
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="area with tolerable erosion"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-ifelse(x<2,100,
ifelse(x>10,5,normhab(((x-10)/(2-10))*100,0,100)))
}
n<-n+1
}
##Sink function
#GHG
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="CO2 emissions [tonnes per capita]"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-ifelse(x<2,100,ifelse(x>6,5,normhab((1-(x-2)/(6-2))*100,0,100)))
}
n<-n+1
}
#HCFC
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Consumption of HCFC in ODP per capita"){
control2<-control%>%
filter(Country==name)
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
y<-as.numeric(control2[i-1])
prox<-ifelse(as.numeric(Pays$ideal_state[n])>y,-0.1,as.numeric(Pays$ideal_state[n]))
x<-((x-y)/(prox-y))*100
table[n,i]<-ifelse(x<0,5,ifelse(x>100,100,normhab(x,0,100)))
}
n<-n+1
}
#
#surface water in good chemical status :
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Proportion of surface water in good chemical status"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-normhab(x,0,100)
}
n<-n+1
}
#groundwater in good chemical status :
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Proportion of ground water in good chemical status"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-normhab(x,0,100)
}
n<-n+1
}
##life support function
#Biodiv Terrestrial
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Terrestrial habitats in favourable conservation status"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-ifelse(x>=90,100,
ifelse(x<=30,5,
normhab(x,30,90)))
}
n<-n+1
}
##life support function
#Biodiv Aquatic
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Aquatic habitats in favourable conservation status"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-normhab(x,0,100)
}
n<-n+1
}
##human Health function
#Pm2.5
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Concentrations of PM2.5"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
x<-(x-5)/(35-5)*100
table[n,i]<-ifelse(x<0,5,normhab(x,0,100))
}
n<-n+1
}
#drinking water
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="Drinking water contamination"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
table[n,i]<-normhab(x,0,100)
}
n<-n+1
}
#World Heritage:
if (!is.na(Pays$Indicator[n]) & Pays$Indicator[n]=="status of world heritage sites"){
for (i in 3:8){
x<-as.numeric(Pays[n,i],na.rm=TRUE)
x<-normhab(x,0,100)
table[n,i]<-x
}
n<-n+1
}
table<-table%>%
select(2:10)
#
SESI<-NULL
for (i in 2:7){
SESI<-c(SESI,prod(as.numeric(table[c(1:nrow(Pays)),i]),na.rm=TRUE)^(1/sum(!is.na(as.numeric(table[c(1:nrow(Pays)),i])))))
}
SESI<-c(name,SESI,n-1,"SESI")
#
table<-rbind(table,SESI)
write.csv(table,paste0("Country_normSESI/",name,".csv"))
}
normall("Brazil")
test_norm<-read.csv("Country_normSESI/Brazil.csv")
kable(test_norm) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "400px")
all_norm<-function(Countries){
#to obtain a table for each country
for (i in 1:nrow(Countries)){
n<-Countries[i,1]
normall(n)
}
#to obtain a table of all countries
all_normcountries<-read.csv(paste0("Country_normSESI/",Countries[1,1],".csv"))
for (i in 2:nrow(Countries)){
n<-Countries[i,1]
y<-read.csv(paste0("Country_normSESI/",n,".csv"))
all_normcountries<-full_join(all_normcountries,y)
print(n)
}
write.csv(all_normcountries,paste0("Country_normSESI/","all_normcountries",".csv"))
}
all_norm(Countries)
View(Forest)
all_norm<-read.csv("Country_normSESI/all_normcountries.csv")
all_norm
uneurope<-c("Austria","Belgium","Bulgaria","Croatia","Cyprus","Czechia","Denmark","Estonia","Finland","France","Germany","Greece","Hungary","Ireland","Italy","Latvia","Lithuania","Luxembourg","Malta","Netherlands","Poland","Portugal","Romania","Slovakia","Slovenia","Spain","Sweden","United Kingdom")
Countries<-uneurope
all_europe<-function(Countries){
#to obtain a table for each country
for (i in 1:length(Countries)){
n<-Countries[i]
normall(n)
}
#to obtain a table of all countries
all_normcountries<-read.csv(paste0("Country_normSESI/",Countries[1],".csv"))
for (i in 2:length(Countries)){
n<-Countries[i]
y<-read.csv(paste0("Country_normSESI/",n,".csv"))
all_normcountries<-full_join(all_normcountries,y)
print(n)
}
write.csv(all_normcountries,paste0("Country_normSESI/","Europe_normcountries",".csv"))
}
all_europe(uneurope)
all_europe<-read.csv("Country_normSESI/Europe_normcountries.csv")
all_europe
View(all_norm)
Tree<-read.csv("tree_coverage.csv",sep=";")%>%
select(Country,c(4:9))
#These lines are used to standardize country names.
correspondances <- match(Tree$Country, Countries$Tree)
Tree<-read.csv("tree_coverage.csv",sep=";")%>%
select(Country,c(4:9))
#These lines are used to standardize country names.
correspondances <- match(Tree$Country, Countries$Tree)
Tree$Country<-Countries$Name[correspondances]
Tree<-read.csv("tree_coverage.csv",sep=";")%>%
select(Country,c(4:9))
#These lines are used to standardize country names.
correspondances <- match(Tree$Country, Countries$Tree)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(kableExtra)
Tree<-read.csv("tree_coverage.csv",sep=";")%>%
select(Country,c(4:9))
#These lines are used to standardize country names.
correspondances <- match(Tree$Country, Countries$Tree)
knitr::opts_chunk$set(echo = TRUE)
Tree<-read.csv("tree_coverage.csv",sep=";")%>%
select(Country,c(4:9))
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(kableExtra)
Tree<-read.csv("tree_coverage.csv",sep=";")%>%
select(Country,c(4:9))
#These lines are used to standardize country names.
correspondances <- match(Tree$Country, Countries$Tree)
